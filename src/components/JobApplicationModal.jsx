import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { FiX } from 'react-icons/fi';

const JobApplicationModal = ({ isOpen, onClose, profile = {}, job = {}, onConfirm }) => {
  const [activeTab, setActiveTab] = useState('resume');
  const [form, setForm] = useState({
    name: profile.name || '',
    email: profile.email || '',
    phone: profile.phone || '',
    coverLetter: `Hi ${job.company || ''} team,\n\nI am excited to apply for the ${job.role || ''} role. I believe my background and skills are a good match and I look forward to contributing to your team.\n\nBest,\n${profile.name || ''}`
  });
  const [submitting, setSubmitting] = useState(false);
  const [resumeEditing, setResumeEditing] = useState(false);
  const [resumeText, setResumeText] = useState('');
  const [companyQuestions, setCompanyQuestions] = useState('');
  const [logoError, setLogoError] = useState(false);

  useEffect(() => {
    if (isOpen) {
      setActiveTab('resume');
      setForm({
        name: profile.name || '',
        email: profile.email || '',
        phone: profile.phone || '',
        coverLetter: `Hi ${job.company || ''} team,\n\nI am excited to apply for the ${job.role || ''} role. I believe my background and skills are a good match and I look forward to contributing to your team.\n\nBest,\n${profile.name || ''}`
      });
      // generate a tailored resume and company-specific questions
      const autoResume = generateTailoredResume(profile, job);
      setResumeText(autoResume);
      setCompanyQuestions(generateCompanyQuestions(profile, job));
      setSubmitting(false);
      // reset logo error when opening new modal/job
      setLogoError(false);
    }
  }, [isOpen, profile, job]);

  if (!isOpen) return null;

  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm((s) => ({ ...s, [name]: value }));
  };

  const handleConfirm = async () => {
    setSubmitting(true);
    try {
      const application = {
        applicant: { name: form.name, email: form.email, phone: form.phone },
        coverLetter: form.coverLetter,
        companyQuestions: companyQuestions,
        resumeText: resumeText,
        resumeAutoGenerated: true,
        company: { name: job.company, logo: job.logo || job.companyLogo },
        submittedAt: new Date().toISOString()
      };
      await Promise.resolve(); // placeholder for async save
      if (typeof onConfirm === 'function') onConfirm(application);
    } catch (err) {
      console.error(err);
    } finally {
      setSubmitting(false);
    }
  };

  // Simple resume preview (trimmed) using profile & job
  const generatePreview = () => {
    return {
      name: profile.name || 'Candidate Name',
      title: profile.title || 'Software Engineer',
      email: profile.email || 'candidate@example.com',
      phone: profile.phone || '+65 9123 4567',
      skills: profile.skills || ['JavaScript', 'React', 'Node.js'],
      experience: profile.experience || [
        { title: 'Software Intern', company: 'Acme', period: '2024', bullets: ['Built features', 'Fixed bugs'] }
      ]
    };
  };

  const preview = generatePreview();

  // Generate a short tailored resume string using job and profile (freestyle allowed)
  function generateTailoredResume(profile, job) {
    const name = profile.name || 'Candidate Name';
    const title = profile.title || 'Software Engineer';
    const location = profile.location || '';
    const skills = (profile.skills || []).slice(0, 6).join(', ') || 'JavaScript, React, Node.js';
    const bullets = (profile.experience || []).slice(0, 3).map((e) => `- ${e.title} at ${e.company || 'Company'} (${e.period || ''}): ${((e.bullets||[])[0]) || 'Contributed to product features and collaboration.'}`).join('\n');

    // Tailor with job details
    const intro = `Profile: ${name} — ${title}${location ? ` • ${location}` : ''}`;
    const summary = `Summary: Motivated ${title} with hands-on experience in building scalable web services. Highly interested in ${job.role || 'this role'} at ${job.company || ''} where I can apply ${skills} to ${job.description ? job.description.split('.')[0] : 'build impactful products'}.`;

    return [intro, '', summary, '', 'Key Skills:', skills, '', 'Experience:', bullets, '', 'Education:', (profile.education || 'B.Sc. in Computer Science')].join('\n');
  }

  // Craft a short company-specific question/prefill for the application form
  function generateCompanyQuestions(profile, job) {
    // freestyle rules: if company name contains Fin or Bank use fintech phrasing
    const comp = (job.company || '').toLowerCase();
    if (comp.includes('fin') || comp.includes('bank') || comp.includes('money')) {
      return 'Please briefly describe any experience you have with financial systems, data privacy, or compliance.\n(e.g., worked with payment APIs, PCI-DSS awareness, or data encryption)';
    }
    if (comp.includes('ai') || comp.includes('ml')) {
      return 'Please list your experience with ML/AI tools or projects (models, datasets, inference pipelines).\nInclude links to any repos or demos.';
    }
    // default
    return 'Why are you a good fit for this role? (1-2 short paragraphs)';
  }

  return (
    <AnimatePresence>
      {isOpen && (
        <>
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50"
            onClick={onClose}
          />

          <motion.div
            // mobile-first: slide-up bottom sheet; on md+ center the modal
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 50 }}
            className="fixed inset-0 z-50 flex items-end md:items-center justify-center p-0 md:p-4"
            onClick={onClose}
          >
            <div
              onClick={(e) => e.stopPropagation()}
              className="w-full max-w-[480px] mx-auto bg-white dark:bg-gray-800 rounded-t-2xl md:rounded-2xl shadow-2xl overflow-hidden h-[82vh] md:h-auto"
            >
              <div className="p-4 border-b border-gray-200 dark:border-gray-700 flex items-center justify-between">
                <div>
                  <h3 className="text-lg font-bold text-gray-900 dark:text-white">Review & Submit</h3>
                  <p className="text-sm text-gray-700 dark:text-gray-300">Resume & application for {job.role} @ {job.company}</p>
                </div>
                <button onClick={onClose} className="p-2 rounded hover:bg-gray-100 dark:hover:bg-gray-700"><FiX /></button>
              </div>

              <div className="p-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <div className="flex items-center gap-2 mb-3">
                    <button
                      onClick={() => setActiveTab('resume')}
                      className={`px-3 py-2 rounded ${activeTab === 'resume' ? 'bg-blue-600 text-white' : 'bg-gray-800 text-white dark:bg-gray-700'}`}
                    >
                      Resume
                    </button>
                    <button
                      onClick={() => setActiveTab('application')}
                      className={`px-3 py-2 rounded ${activeTab === 'application' ? 'bg-blue-600 text-white' : 'bg-gray-800 text-white dark:bg-gray-700'}`}
                    >
                      Application
                    </button>
                  </div>

                  {activeTab === 'resume' && (
                    <div className="bg-gray-50 dark:bg-gray-900 p-4 rounded-lg h-[50vh] md:h-[60vh] overflow-y-auto text-base">
                      <div className="flex items-start justify-between mb-3">
                        <div>
                          <h3 className="text-lg font-semibold text-gray-900 dark:text-white">Resume Preview</h3>
                          <p className="text-sm text-gray-600 dark:text-gray-400">Auto-tailored to this job — you may edit before confirming.</p>
                        </div>
                        <div>
                          {!resumeEditing ? (
                            <button
                              onClick={() => {
                                // enter edit mode — we will show the user's original resume as a placeholder
                                setResumeEditing(true);
                              }}
                              className="px-3 py-1 rounded bg-gray-800 text-white dark:bg-gray-700"
                            >
                              Edit Resume
                            </button>
                          ) : (
                            <button onClick={() => { setResumeText(generateTailoredResume(profile, job)); setResumeEditing(false); }} className="px-3 py-1 rounded bg-gray-800 text-white dark:bg-gray-700">Reset</button>
                          )}
                        </div>
                      </div>

                      {!resumeEditing ? (
                        <div className="whitespace-pre-wrap text-sm text-gray-800 dark:text-gray-100 leading-relaxed">
                          {resumeText}
                        </div>
                      ) : (
                        <div>
                          <textarea
                            value={resumeText}
                            onChange={(e) => setResumeText(e.target.value)}
                            rows={12}
                            placeholder={profile && profile.resume ? profile.resume : generateTailoredResume(profile, job)}
                            className="w-full p-3 rounded bg-white dark:bg-gray-800 border text-sm text-gray-800 dark:text-gray-100"
                          />
                          <div className="mt-2 flex gap-2">
                            <button onClick={() => setResumeEditing(false)} className="px-3 py-2 rounded bg-gray-800 text-white dark:bg-gray-700">Save</button>
                            <button onClick={() => { setResumeText(generateTailoredResume(profile, job)); setResumeEditing(false); }} className="px-3 py-2 rounded bg-gray-800 text-white dark:bg-gray-700">Cancel</button>
                          </div>
                        </div>
                      )}
                    </div>
                  )}

                  {activeTab === 'application' && (
                    <div className="bg-gray-50 dark:bg-gray-900 p-4 rounded-lg h-[50vh] md:h-[60vh] overflow-y-auto text-base">
                      <div className="mb-3 p-3 bg-white dark:bg-gray-800 rounded border flex items-center gap-3">
                        { (job.logo || job.companyLogo) && !logoError ? (
                          <img
                            src={job.logo || job.companyLogo}
                            alt={job.company || 'Company'}
                            onError={() => setLogoError(true)}
                            className="h-12 w-12 object-contain rounded"
                          />
                        ) : (
                          <div className="h-12 w-12 bg-gray-200 dark:bg-gray-700 rounded flex items-center justify-center text-gray-700 dark:text-gray-200 font-bold">{(job.company || 'C').charAt(0).toUpperCase()}</div>
                        )}
                        <div>
                          <div className="font-semibold text-gray-900 dark:text-white">{job.company || 'Company Name'}</div>
                          <div className="text-sm text-gray-600 dark:text-gray-400">{job.industry || job.location || ''}</div>
                        </div>
                      </div>
                      <div className="mb-2">
                        <div className="flex items-center justify-between">
                          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">Full name</label>
                          <button onClick={() => { /* focus behavior or future expand */ }} className="text-xs text-gray-600 dark:text-gray-400">Edit</button>
                        </div>
                        <input name="name" value={form.name} onChange={handleChange} className="w-full mt-1 p-3 rounded bg-white dark:bg-gray-800 border text-base text-gray-800 dark:text-gray-100" />
                      </div>

                      <div className="mb-2">
                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">Email</label>
                        <input name="email" value={form.email} onChange={handleChange} className="w-full mt-1 p-3 rounded bg-white dark:bg-gray-800 border text-base text-gray-800 dark:text-gray-100" />
                      </div>

                      <div className="mb-2">
                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">Phone</label>
                        <input name="phone" value={form.phone} onChange={handleChange} className="w-full mt-1 p-3 rounded bg-white dark:bg-gray-800 border text-base text-gray-800 dark:text-gray-100" />
                      </div>

                      <div className="mb-3">
                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">Company Questions</label>
                        <textarea name="companyQuestions" value={companyQuestions} onChange={(e) => setCompanyQuestions(e.target.value)} rows={4} className="w-full mt-1 p-3 rounded bg-white dark:bg-gray-800 border text-base text-gray-800 dark:text-gray-100" />
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mt-3">Cover Letter</label>
                        <textarea name="coverLetter" value={form.coverLetter} onChange={handleChange} rows={6} className="w-full mt-1 p-3 rounded bg-white dark:bg-gray-800 border text-base text-gray-800 dark:text-gray-100" />
                      </div>
                    </div>
                  )}
                </div>

                <div>
                  <div className="p-4 rounded-t-lg md:rounded-lg bg-white dark:bg-gray-800 h-[32vh] md:h-[60vh] overflow-y-auto border">
                    <h4 className="font-semibold mb-2">Job Summary</h4>
                    <div className="text-sm text-gray-700 dark:text-gray-300 mb-3">
                      <div className="font-medium">{job.role} • {job.company}</div>
                      <div className="text-xs text-gray-600">{job.location} • {job.type}</div>
                    </div>
                    <h5 className="font-semibold">Description</h5>
                    <p className="text-sm text-gray-700 dark:text-gray-300 mb-3">{job.description}</p>
                    <h5 className="font-semibold">Required Skills</h5>
                    <div className="flex flex-wrap gap-2 mt-2 mb-4">
                      {(job.requiredSkills || []).map((s, i) => (
                        <span key={i} className="px-2 py-1 bg-gray-300 dark:bg-gray-700 rounded text-sm text-gray-800 dark:text-gray-200">{s}</span>
                      ))}
                    </div>

                    <div className="mt-4">
                      <p className="text-xs text-gray-600">Tip: edit your cover letter or contact info above before confirming.</p>
                    </div>
                  </div>

                  <div className="mt-4 flex flex-col md:flex-row justify-end gap-3 p-4">
                    <button onClick={onClose} className="w-full md:w-auto px-4 py-3 rounded bg-gray-800 text-white dark:bg-gray-700">Cancel</button>
                    <button onClick={handleConfirm} disabled={submitting} className="w-full md:w-auto px-4 py-3 rounded bg-blue-600 text-white">{submitting ? 'Submitting...' : 'Confirm & Submit'}</button>
                  </div>
                </div>
              </div>
            </div>
          </motion.div>
        </>
      )}
    </AnimatePresence>
  );
};

export default JobApplicationModal;
